# with trackig the minimum value
# time complexity O(n) as it traverses through the entire array
# space complexity O(1) , the amt of memory required for the code is constant and does not depend on input size
class Solution:
    def smallestEqual(self, nums: List[int]) -> int:
        min_num = 100
        c = 0
        for i in range(len(nums)) :
            if i % 10 == nums[i] :
                c = 1
                min_num = min(min_num, i)
        if c == 1:
            return min_num 
        return -1
        
  *************************************************
  # with out tracking minimum value
  class Solution:
    def smallestEqual(self, nums: List[int]) -> int:
        c = 0
        for i in range(len(nums)) :
            if i % 10 == nums[i] :
                c = 1
                break
        if c == 1:
            return i
        return -1
  **************************************************
  
 # most efficient 
# this takes time complexity as O(n) and space complexity as O(1)
class Solution:
    def smallestEqual(self, nums: List[int]) -> int:
        for i in range(len(nums)) :
            if i % 10 == nums[i] :
                return i
                break
        return -1
    
