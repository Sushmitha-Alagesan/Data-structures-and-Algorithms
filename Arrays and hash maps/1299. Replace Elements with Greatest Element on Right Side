With time and spaces complexity as O(n) as the array modification is not inplace and a new array has been created
class Solution:
    def replaceElements(self, arr: List[int]) -> List[int]:
        maxi = -1
        ans = []
        for i in range(len(arr)-1 , -1, -1):
            if arr[i] > maxi:
                ans.append(maxi)
                maxi = arr[i]
            else:
                ans.append(maxi)

        return ans[::-1]
======================================================
With time complexuty as O(n) and spaces complexity as O(1) as algorithm modifies the input array in-place 

class Solution:
    def replaceElements(self, arr: List[int]) -> List[int]:
        maxi = -1
        for i in range(len(arr)-1 , -1, -1):
            temp = maxi
            maxi = max(temp, arr[i])
            arr[i] = temp
            
        return arr
